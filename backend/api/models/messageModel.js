const sql = require("mssql");
const database = require("../config/database");

/**
 * üß© L·∫•y t·∫•t c·∫£ messages trong m·ªôt conversation
 */
module.exports.getMessagesByConversationId = async (conversationId, limit = 100, offset = 0) => {
  const pool = await database.connect();
  
  // L·∫•y messages
  const messagesResult = await pool
    .request()
    .input("ConversationID", sql.BigInt, conversationId)
    .input("Limit", sql.Int, limit)
    .input("Offset", sql.Int, offset)
    .query(`
      SELECT 
        m.MessageID,
        m.UserID,
        m.ModelID,
        m.Content,
        m.MessageType,
        m.Timestamp,
        u.FullName AS SenderName,
        u.Avatar AS SenderAvatar,
        mod.Name AS ModelName
      FROM Messages m
      LEFT JOIN [User] u ON m.UserID = u.UserID
      LEFT JOIN Models mod ON m.ModelID = mod.ModelID
      WHERE m.ConversationID = @ConversationID
      ORDER BY m.Timestamp ASC
      OFFSET @Offset ROWS
      FETCH NEXT @Limit ROWS ONLY
    `);

  const messages = messagesResult.recordset;

  // L·∫•y attachments cho t·∫•t c·∫£ messages
  for (let message of messages) {
    const attachmentsResult = await pool
      .request()
      .input("MessageID", sql.BigInt, message.MessageID)
      .query(`
        SELECT 
          AttachmentID,
          OriginalFileName,
          FileSize,
          StorageURL,
          CreateAt
        FROM Attachments
        WHERE MessageID = @MessageID
      `);
    
    message.Attachments = attachmentsResult.recordset;
  }

  return messages;
};

/**
 * üß© L·∫•y chi ti·∫øt m·ªôt message
 */
module.exports.getMessageById = async (messageId) => {
  const pool = await database.connect();
  const result = await pool
    .request()
    .input("MessageID", sql.BigInt, messageId)
    .query(`
      SELECT 
        m.MessageID,
        m.UserID,
        m.ModelID,
        m.Content,
        m.MessageType,
        m.Timestamp,
        m.ConversationID,
        u.FullName AS SenderName,
        u.Avatar AS SenderAvatar,
        mod.Name AS ModelName
      FROM Messages m
      LEFT JOIN [User] u ON m.UserID = u.UserID
      LEFT JOIN Models mod ON m.ModelID = mod.ModelID
      WHERE m.MessageID = @MessageID
    `);
  return result.recordset[0];
};

/**
 * üß© T·∫°o message m·ªõi t·ª´ user
 * @param {number} conversationId - ID cu·ªôc tr√≤ chuy·ªán
 * @param {number} userId - ID ng∆∞·ªùi g·ª≠i
 * @param {string} content - N·ªôi dung tin nh·∫Øn
 * @param {string} messageType - Lo·∫°i tin nh·∫Øn (text, image, file, system)
 */
module.exports.createUserMessage = async (conversationId, userId, content, messageType = "text") => {
  const pool = await database.connect();
  const result = await pool
    .request()
    .input("ConversationID", sql.BigInt, conversationId)
    .input("UserID", sql.Int, userId)
    .input("Content", sql.NVarChar(sql.MAX), content)
    .input("MessageType", sql.NVarChar(50), messageType)
    .input("Timestamp", sql.DateTime, new Date())
    .query(`
      INSERT INTO Messages (ConversationID, UserID, ModelID, Content, MessageType, Timestamp)
      OUTPUT INSERTED.MessageID
      VALUES (@ConversationID, @UserID, NULL, @Content, @MessageType, @Timestamp)
    `);
  return result.recordset[0].MessageID;
};

/**
 * üß© T·∫°o message m·ªõi t·ª´ AI model
 * @param {number} conversationId - ID cu·ªôc tr√≤ chuy·ªán
 * @param {number} userId - ID ng∆∞·ªùi d√πng (owner c·ªßa conversation)
 * @param {number} modelId - ID m√¥ h√¨nh AI
 * @param {string} content - N·ªôi dung tin nh·∫Øn
 * @param {string} messageType - Lo·∫°i tin nh·∫Øn (text, image, file, system)
 */
module.exports.createModelMessage = async (conversationId, userId, modelId, content, messageType = "text") => {
  const pool = await database.connect();
  const result = await pool
    .request()
    .input("ConversationID", sql.BigInt, conversationId)
    .input("UserID", sql.Int, userId) // S·ª≠ d·ª•ng UserID th·ª±c t·∫ø thay v√¨ NULL
    .input("ModelID", sql.BigInt, modelId) // C√≥ th·ªÉ l√† null cho .env fallback
    .input("Content", sql.NVarChar(sql.MAX), content)
    .input("MessageType", sql.NVarChar(50), messageType)
    .input("Timestamp", sql.DateTime, new Date())
    .query(`
      INSERT INTO Messages (ConversationID, UserID, ModelID, Content, MessageType, Timestamp)
      OUTPUT INSERTED.MessageID
      VALUES (@ConversationID, @UserID, @ModelID, @Content, @MessageType, @Timestamp)
    `);
  
  const messageId = result.recordset[0].MessageID;
  console.log("‚úÖ Model message created successfully with ID:", messageId);
  return messageId;
};

/**
 * üß© C·∫≠p nh·∫≠t n·ªôi dung message
 */
module.exports.updateMessage = async (messageId, content) => {
  const pool = await database.connect();
  await pool
    .request()
    .input("MessageID", sql.BigInt, messageId)
    .input("Content", sql.NVarChar(sql.MAX), content)
    .query(`
      UPDATE Messages 
      SET Content = @Content 
      WHERE MessageID = @MessageID
    `);
};

/**
 * üß© X√≥a message
 */
module.exports.deleteMessage = async (messageId) => {
  const pool = await database.connect();
  const transaction = pool.transaction();
  
  try {
    await transaction.begin();

    // X√≥a attachments tr∆∞·ªõc
    await transaction
      .request()
      .input("MessageID", sql.BigInt, messageId)
      .query(`
        DELETE FROM Attachments 
        WHERE MessageID = @MessageID
      `);

    // X√≥a message
    await transaction
      .request()
      .input("MessageID", sql.BigInt, messageId)
      .query(`
        DELETE FROM Messages 
        WHERE MessageID = @MessageID
      `);

    await transaction.commit();
  } catch (error) {
    await transaction.rollback();
    throw error;
  }
};

/**
 * üß© ƒê·∫øm s·ªë l∆∞·ª£ng messages trong conversation
 */
module.exports.countMessages = async (conversationId) => {
  const pool = await database.connect();
  const result = await pool
    .request()
    .input("ConversationID", sql.BigInt, conversationId)
    .query(`
      SELECT COUNT(*) AS Total 
      FROM Messages 
      WHERE ConversationID = @ConversationID
    `);
  return result.recordset[0].Total;
};

/**
 * üß© T√¨m ki·∫øm messages theo n·ªôi dung
 */
module.exports.searchMessages = async (conversationId, searchText) => {
  const pool = await database.connect();
  const result = await pool
    .request()
    .input("ConversationID", sql.BigInt, conversationId)
    .input("SearchText", sql.NVarChar(sql.MAX), `%${searchText}%`)
    .query(`
      SELECT 
        m.MessageID,
        m.UserID,
        m.ModelID,
        m.Content,
        m.MessageType,
        m.Timestamp,
        u.FullName AS SenderName,
        mod.Name AS ModelName
      FROM Messages m
      LEFT JOIN [User] u ON m.UserID = u.UserID
      LEFT JOIN Models mod ON m.ModelID = mod.ModelID
      WHERE m.ConversationID = @ConversationID 
        AND m.Content LIKE @SearchText
      ORDER BY m.Timestamp DESC
    `);
  return result.recordset;
};

/**
 * üß© Ch·ªânh s·ª≠a n·ªôi dung message (t∆∞∆°ng t·ª± Messenger)
 * @param {number} messageId - ID tin nh·∫Øn c·∫ßn ch·ªânh s·ª≠a
 * @param {string} newContent - N·ªôi dung m·ªõi
 * @param {number} userId - ID ng∆∞·ªùi d√πng (ƒë·ªÉ ki·ªÉm tra quy·ªÅn)
 */
module.exports.editMessage = async (messageId, newContent, userId) => {
  const pool = await database.connect();
  
  // Ki·ªÉm tra xem message c√≥ thu·ªôc v·ªÅ user kh√¥ng
  const checkResult = await pool
    .request()
    .input("MessageID", sql.BigInt, messageId)
    .input("UserID", sql.Int, userId)
    .query(`
      SELECT MessageID, Content, MessageType 
      FROM Messages 
      WHERE MessageID = @MessageID AND UserID = @UserID
    `);

  if (checkResult.recordset.length === 0) {
    throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a tin nh·∫Øn n√†y");
  }

  // C·∫≠p nh·∫≠t n·ªôi dung
  await pool
    .request()
    .input("MessageID", sql.BigInt, messageId)
    .input("Content", sql.NVarChar(sql.MAX), newContent)
    .query(`
      UPDATE Messages 
      SET Content = @Content 
      WHERE MessageID = @MessageID
    `);

  // Tr·∫£ v·ªÅ message ƒë√£ c·∫≠p nh·∫≠t
  return await module.exports.getMessageById(messageId);
};

/**
 * üß© Thu h·ªìi message (t∆∞∆°ng t·ª± Messenger)
 * @param {number} messageId - ID tin nh·∫Øn c·∫ßn thu h·ªìi
 * @param {number} userId - ID ng∆∞·ªùi d√πng (ƒë·ªÉ ki·ªÉm tra quy·ªÅn)
 */
module.exports.recallMessage = async (messageId, userId) => {
  const pool = await database.connect();
  
  // Ki·ªÉm tra xem message c√≥ thu·ªôc v·ªÅ user kh√¥ng
  const checkResult = await pool
    .request()
    .input("MessageID", sql.BigInt, messageId)
    .input("UserID", sql.Int, userId)
    .query(`
      SELECT MessageID, Content, MessageType 
      FROM Messages 
      WHERE MessageID = @MessageID AND UserID = @UserID
    `);

  if (checkResult.recordset.length === 0) {
    throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn thu h·ªìi tin nh·∫Øn n√†y");
  }

  // C·∫≠p nh·∫≠t message th√†nh "recalled"
  await pool
    .request()
    .input("MessageID", sql.BigInt, messageId)
    .input("RecalledContent", sql.NVarChar(sql.MAX), "Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c thu h·ªìi")
    .input("RecalledType", sql.NVarChar(50), "recalled")
    .query(`
      UPDATE Messages 
      SET Content = @RecalledContent, 
          MessageType = @RecalledType 
      WHERE MessageID = @MessageID
    `);

  // Tr·∫£ v·ªÅ message ƒë√£ c·∫≠p nh·∫≠t
  return await module.exports.getMessageById(messageId);
};
