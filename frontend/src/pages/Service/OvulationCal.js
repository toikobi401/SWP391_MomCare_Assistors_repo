import React, { useState } from "react";
import { format, addDays, parseISO } from "date-fns";


export const OvulationCal = () => {
  const [tab, setTab] = useState("cycle"); // cycle | chance | avoid
  const [lmp, setLmp] = useState("");
  const [cycleLength, setCycleLength] = useState(28);
  const [periodLength, setPeriodLength] = useState(6);
  const [result, setResult] = useState(null);

  const [ovulationInput, setOvulationInput] = useState("");
  const [chanceCalendar, setChanceCalendar] = useState([]);
  const [avoidCalendar, setAvoidCalendar] = useState([]);

  // üîπ T√≠nh ng√†y r·ª•ng tr·ª©ng t·ª´ k·ª≥ kinh
  const calculateOvulation = () => {
    if (!lmp) return;
    const lmpDate = parseISO(lmp);
    const ovulationDate = addDays(lmpDate, cycleLength - 14);
    const fertileStart = addDays(ovulationDate, -5);
    const fertileEnd = addDays(ovulationDate, 1);
    const nextPeriod = addDays(lmpDate, cycleLength);

    setResult({
      ovulation: format(ovulationDate, "dd/MM/yyyy"),
      fertileStart: format(fertileStart, "dd/MM/yyyy"),
      fertileEnd: format(fertileEnd, "dd/MM/yyyy"),
      nextPeriod: format(nextPeriod, "dd/MM/yyyy"),
    });
  };

  // üîπ Sinh d·ªØ li·ªáu gom nh√≥m
  const generateCalendar = (ovulationDate, mode = "chance") => {
    const temp = [];
    for (let i = -5; i <= 10; i++) {
      const date = addDays(ovulationDate, i);
      const formatted = format(date, "yyyy-MM-dd");
      let status = "";
      let chance = 1;

      // Ch·∫ø ƒë·ªô t√≠nh kh√°c nhau
      if (mode === "chance") {
        switch (true) {
          case i < -1 && i >= -5:
            status = "Ng√†y d·ªÖ th·ª• thai";
            chance = 20 + (5 + i) * 5;
            break;
          case i === -1:
            status = "C∆° h·ªôi cao";
            chance = 35;
            break;
          case i === 0:
            status = "Ng√†y r·ª•ng tr·ª©ng";
            chance = 40;
            break;
          case i > 0 && i < 5:
            status = "Th·ªùi k·ª≥ √≠t th·ª• thai";
            chance = 5;
            break;
          default:
            status = "Ngo√†i chu k·ª≥";
            chance = 1;
            break;
        }
      } else if (mode === "avoid") {
        switch (true) {
          case i < -1 && i >= -5:
            status = "Th·ªùi k·ª≥ nguy hi·ªÉm (kh√¥ng an to√†n)";
            chance = 80;
            break;
          case i === -1:
          case i === 0:
            status = "R·∫•t nguy hi·ªÉm";
            chance = 95;
            break;
          case i > 0 && i < 5:
            status = "Nguy c∆° th·∫•p";
            chance = 30;
            break;
          default:
            status = "An to√†n";
            chance = 5;
            break;
        }
      }

      temp.push({ date: formatted, status, chance });
    }

    // üîπ Gom nh√≥m li√™n ti·∫øp c√πng tr·∫°ng th√°i
    const merged = [];
    let groupStart = temp[0];
    for (let i = 1; i <= temp.length; i++) {
      const prev = temp[i - 1];
      const current = temp[i];
      if (!current || current.status !== prev.status || current.chance !== prev.chance) {
        merged.push({
          start: groupStart.date,
          end: prev.date,
          status: prev.status,
          chance: prev.chance,
        });
        groupStart = current;
      }
    }

    if (mode === "chance") setChanceCalendar(merged);
    else setAvoidCalendar(merged);
  };

  // üîπ T√≠nh c∆° h·ªôi th·ª• thai
  const calculateChance = () => {
    if (!ovulationInput) return;
    const ovulationDate = parseISO(ovulationInput);
    generateCalendar(ovulationDate, "chance");
  };

  // üîπ T√≠nh c∆° h·ªôi tr√°nh thai
  const calculateAvoid = () => {
    if (!ovulationInput) return;
    const ovulationDate = parseISO(ovulationInput);
    generateCalendar(ovulationDate, "avoid");
  };

  return (
    <div className="ovulation-page">
      <div className="header-section">
        <h2>T√≠nh ng√†y r·ª•ng tr·ª©ng ‚Ä¢ Th·ª• thai ‚Ä¢ Tr√°nh thai</h2>
      </div>

      <div className="ovulation-box">
        <h3 className="box-title">M·ª•c ƒë√≠ch</h3>
        <div className="purpose-tabs">
          <button className={tab === "cycle" ? "active" : ""} onClick={() => setTab("cycle")}>
            Theo d√µi chu k·ª≥ kinh
          </button>
          <button className={tab === "chance" ? "active" : ""} onClick={() => setTab("chance")}>
            C∆° h·ªôi th·ª• thai
          </button>
          <button className={tab === "avoid" ? "active" : ""} onClick={() => setTab("avoid")}>
            C∆° h·ªôi tr√°nh thai
          </button>
        </div>

        {/* --- TAB 1: Theo d√µi chu k·ª≥ kinh --- */}
        {tab === "cycle" && (
          <div className="form-section">
            <label>Ng√†y ƒë·∫ßu ti√™n c·ªßa k·ª≥ kinh g·∫ßn nh·∫•t</label>
            <input type="date" value={lmp} onChange={(e) => setLmp(e.target.value)} />

            <label>ƒê·ªô d√†i chu k·ª≥ kinh nguy·ªát (ng√†y)</label>
            <input
              type="number"
              value={cycleLength}
              onChange={(e) => setCycleLength(Number(e.target.value))}
              min="20"
              max="40"
            />

            <label>S·ªë ng√†y h√†nh kinh (ng√†y)</label>
            <input
              type="number"
              value={periodLength}
              onChange={(e) => setPeriodLength(Number(e.target.value))}
              min="3"
              max="10"
            />

            <button className="btn-calc" onClick={calculateOvulation}>
              T√≠nh ngay
            </button>

            {result && (
              <div className="result-section">
                <h4>K·∫øt qu·∫£ d·ª± ki·∫øn</h4>
                <p>üå∏ Ng√†y r·ª•ng tr·ª©ng: <b>{result.ovulation}</b></p>
                <p>üåø C·ª≠a s·ªï th·ª• thai: <b>{result.fertileStart}</b> ‚Äì <b>{result.fertileEnd}</b></p>
                <p>üìÖ K·ª≥ kinh ti·∫øp theo: <b>{result.nextPeriod}</b></p>
              </div>
            )}
          </div>
        )}

        {/* --- TAB 2: C∆° h·ªôi th·ª• thai --- */}
        {tab === "chance" && (
          <div className="form-section">
            <label>Ng√†y r·ª•ng tr·ª©ng d·ª± ki·∫øn</label>
            <input type="date" value={ovulationInput} onChange={(e) => setOvulationInput(e.target.value)} />

            <button className="btn-calc" onClick={calculateChance}>
              T√≠nh c∆° h·ªôi th·ª• thai
            </button>

            {chanceCalendar.length > 0 && (
              <div className="fertility-result">
                <h3>üåº K·∫øt qu·∫£ c∆° h·ªôi th·ª• thai</h3>
                <div className="chance-table">
                  <div className="table-header">
                    <span>Kho·∫£ng ng√†y</span>
                    <span>Tr·∫°ng th√°i</span>
                    <span>T·ª∑ l·ªá (%)</span>
                  </div>

                  {chanceCalendar.map((d, i) => (
                    <div
                      key={i}
                      className={`table-row ${
                        d.status.includes("r·ª•ng") ? "ovulation-day" :
                        d.status.includes("d·ªÖ") ? "fertile-day" :
                        d.status.includes("cao") ? "fertile-day" :
                        d.status.includes("√≠t") ? "low-day" : "normal-day"
                      }`}
                    >
                      <span>
                        {format(parseISO(d.start), "dd/MM")}
                        {d.start !== d.end ? ` ‚Äì ${format(parseISO(d.end), "dd/MM")}` : ""}
                      </span>
                      <span>{d.status}</span>
                      <span className="chance">{d.chance}%</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}

        {/* --- TAB 3: C∆° h·ªôi tr√°nh thai --- */}
        {tab === "avoid" && (
          <div className="form-section">
            <label>Ng√†y r·ª•ng tr·ª©ng d·ª± ki·∫øn</label>
            <input type="date" value={ovulationInput} onChange={(e) => setOvulationInput(e.target.value)} />

            <button className="btn-calc" onClick={calculateAvoid}>
              T√≠nh c∆° h·ªôi tr√°nh thai
            </button>

            {avoidCalendar.length > 0 && (
              <div className="fertility-result">
                <h3>üö´ K·∫øt qu·∫£ c∆° h·ªôi tr√°nh thai</h3>
                <div className="chance-table">
                  <div className="table-header">
                    <span>Kho·∫£ng ng√†y</span>
                    <span>Tr·∫°ng th√°i</span>
                    <span>Nguy c∆° (%)</span>
                  </div>

                  {avoidCalendar.map((d, i) => (
                    <div
                      key={i}
                      className={`table-row ${
                        d.status.includes("R·∫•t") ? "ovulation-day" :
                        d.status.includes("nguy") ? "fertile-day" :
                        d.status.includes("th·∫•p") ? "low-day" : "normal-day"
                      }`}
                    >
                      <span>
                        {format(parseISO(d.start), "dd/MM")}
                        {d.start !== d.end ? ` ‚Äì ${format(parseISO(d.end), "dd/MM")}` : ""}
                      </span>
                      <span>{d.status}</span>
                      <span className="chance">{d.chance}%</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};
